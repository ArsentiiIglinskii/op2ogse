-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
end


local sun_positions = {}
function on_spawn()
  local pt = profile_timer()
  pt:start()
  load_sun_positions()
  pt:stop()
  log2(
    "[%s]: loaded %s: %s",
    script_name(), table.getn( sun_positions ), pt:time()
  )
end


local ini   = ini_file( "weathers\\sun_position.ltx" )
local sname = "sun_positions"
local SUN_POS_COUNT = 500

function load_sun_positions()
  ASSERT(
    ini:section_exist( sname ),
    "[sun_pos.sunpos_table] section '%s' not found!", sname
  )
  local lines_count = ini:line_count( sname )
  local row_data    = {}
  for i = 0, lines_count - 1 do
    local res, key, line = ini:r_line( sname, i )
    table.insert( row_data, parse_nums( line ) )
  end
  table.sort( row_data, function( a, b ) return a[ 1 ] < b[ 1 ] end )
  ASSERT(
    row_data[ 1 ][ 1 ] == 0,
    "[sun_pos.sunpos_table] first sun position point must have time = 0"
  )
  local row_data_cnt = table.getn( row_data )
  ASSERT(
    row_data[ row_data_cnt ][ 1 ] == 1,
    "[sun_pos.sunpos_table] last sun position point must have time = 1"
  )
  local it = 1
  local t1 = row_data[ it     ][ 1 ]
  local t2 = row_data[ it + 1 ][ 1 ]
  for i = 0, SUN_POS_COUNT do
    local t = 1 * i / SUN_POS_COUNT;
    while not ( t1 <= t and t <= t2 ) do
      it = it + 1
      t1 = row_data[ it     ][ 1 ]
      t2 = row_data[ it + 1 ][ 1 ]
    end
    local sc = {}
    sc.dAzimuth     = row_data[ it ][ 2 ]
      + ( row_data[ it + 1 ][ 2 ] - row_data[ it ][ 2 ] )
      * ( t - row_data[ it ][ 1 ] )
      / ( row_data[ it + 1 ][ 1 ] - row_data[ it ][ 1 ] );
    sc.dZenithAngle = row_data[ it ][ 3 ]
      + ( row_data[ it + 1 ][ 3 ] - row_data[ it ][ 3 ] )
      * ( t - row_data[ it ][ 1 ] )
      / ( row_data[ it + 1 ][ 1 ] - row_data[ it ][ 1 ] );
    table.insert( sun_positions, sc )
  end
  table.insert( sun_positions, sun_positions[ 2 ] )
end


function sunpos_table( hours, minutes, seconds )
  local day_time = ( hours + ( minutes + seconds / 60 ) / 60 ) / 24
  local it, dt   = math.modf( day_time * SUN_POS_COUNT + 1 )
  local dt       = ( day_time * SUN_POS_COUNT - it ) / SUN_POS_COUNT
  local sc1      = sun_positions[ it     ]
  local sc2      = sun_positions[ it + 1 ]
  ASSERT(
    ( sc1 and sc2 ),
    "[%s]: broken sun_positions table: n = %s, it = %s",
    script_name(), table.getn( sun_positions ), it
  )
  local azimuth      = sc1.dAzimuth
    + dt * ( sc2.dAzimuth     - sc1.dAzimuth     )
  local zenith_angle = sc1.dZenithAngle
    + dt * ( sc2.dZenithAngle - sc1.dZenithAngle )
  return azimuth, zenith_angle, day_time
end
