-- -*- mode: lua; coding: windows-1251-dos -*-

local max_charge = 10


function attach( sm )
  sm:subscribe({ signal = "on_first_update",   fun = this.on_first_update   })
  sm:subscribe({ signal = "on_mm_return_game", fun = this.on_mm_return_game })
  sm:subscribe({ signal = "on_save",           fun = this.on_save           })
end


local cur_charge
function on_first_update()
  local obj = db.actor:object( "life_saver_af_known" )
  if obj then
    cur_charge = ogse.load_var_safe( "dsh_life_saver.cnt" ) or max_charge
    obj:set_condition( cur_charge / max_charge )
    if cur_charge < max_charge then
      start_charging( obj )
    end
  end
end


local discharge_on_save = false

function is_charged()
  local obj = db.actor:object( "life_saver_af_known" )
  if not obj then
    return db.actor:object( "life_saver_af_unknown" ) ~= nil
  end
  if obj:condition() > 0 then
    discharge_on_save = true
    return true
  end
  return false
end


function on_mm_return_game()
  discharge_on_save = false
end


function discharge()
  local obj = db.actor:object( "life_saver_af_known" )
  if obj and obj:condition() > 0 then
    cur_charge = cur_charge - 1
    ASSERT(
      cur_charge >= 0, "[%s]: cur_charge < 0: %s", script_name(), cur_charge
    )
    obj:set_condition( cur_charge / max_charge )
    start_charging( obj )
  end
end


local charge_t
function start_charging( af )
  if charge_t then return end
  charge_t = dsh.wait_condition(
    function() return cur_charge == max_charge end,
    function() charge_t = nil end,
    function()
      ogse_signals.get_mgr():reschedule( math.random( 1000, 5000 ) )
      charging( af )
    end
  )
end


local time_factor = get_float( "alife", "time_factor" )

function charging( af )
  local cur_pos     = db.actor:position()
  local loaded_pos  = ogse.load_var_safe( "dsh.actor_pos" )
  local loaded_time = ogse.load_var_safe( "dsh.save_time" )
  local min_dist    = isIndoor( level.name() ) and 50 or 150
  if
    (
      loaded_pos and (
        cur_pos:distance_to( loaded_pos ) > min_dist
        or math.abs( cur_pos.y - loaded_pos.y ) > 10
      )
    )
    or (
      loaded_time
      and game.get_game_time():diffSec( loaded_time ) > 900 * time_factor
    )
  then
    cur_charge = cur_charge + 1
    af:set_condition( cur_charge / max_charge )
  end
end


function on_save()
  if utils.level_changing() then
    ogse.delete_var( "dsh_life_saver.cnt" )
  elseif cur_charge then
    discharge()
    ogse.save_var( "dsh_life_saver.cnt", cur_charge, "u8" )
  end
  discharge_on_save = false
end


function got_life_saver( ver )
  local sobj
  if db.actor:has_info( "arhara_shaxter_start" ) then
    sobj = ogse.spawn_item_in_inv( "life_saver_af_known"   )
  else
    sobj = ogse.spawn_item_in_inv( "life_saver_af_unknown" )
  end
  level.client_spawn_manager():add(
    sobj.id, -1, function( id, obj )
      cur_charge = max_charge
    end
  )
end


function learned_life_saver()
  local obj = db.actor:object( "life_saver_af_unknown" )
  ASSERT( obj, "[%s]: life_saver_af_unknown not found", script_name() )
  ogse.remove_item_from_inventory( obj )
  local sobj = ogse.spawn_item_in_inv( "life_saver_af_known" )
  level.client_spawn_manager():add(
    sobj.id, -1, function( id, obj )
      cur_charge = max_charge
    end
  )
end
