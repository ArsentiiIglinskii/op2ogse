-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_npc_death", fun = this.on_npc_death })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
  sm:subscribe({
    signal = "on_update", fun = this.check_freezers, queued = true
  })
end


function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  local s = {
    [ "signal" ] = "on_npc_update." .. obj:id(),
    [ "fun"    ] = this.check_mental,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_npc_death( obj, who )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
  end
end


local panic_freezers = {}

function check_mental( obj )
  local binder = obj:binded_object()
  local k      = script_name() .. ".check_mental_t"
  if binder[ k ] and binder[ k ] > time_global() then return end
  binder[ k ] = time_global() + 5000
  local storage = db.storage[ obj:id() ].state_mgr
  if not storage then return end
  local mental = state_lib.states[ storage.target_state ].mental
  if mental and mental == 2 then
    if
      ( not panic_freezers[ obj:id() ] )
      and not xr_companion.is_companion( obj:id() )
    then
      log1(
        "~~WARNING! NPC " .. obj:name()
        .. " is in panic - will check it for freezing."
      )
      panic_freezers[ obj:id() ] = time_global()
    end
  end
end


local update_t
function check_freezers()
  if update_t and update_t > time_global() then return end
  update_t = update_t + 10000
  for k, v in pairs( panic_freezers ) do
    if v and v + 25000 < time_global() then
      log1(
        "!!ERROR! NPC " .. k
        .. " is in panic more than 25 seconds! Trying to recover!"
      )
      local npc = level.object_by_id( k )
      if npc then
        npc:set_mental_state( anim.danger )
      end
      panic_freezers[ k ] = nil
    end
  end
end
