-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_drop",         fun = this.on_item_from_belt })
  sm:subscribe({ signal = "on_item_to_belt", fun = this.on_item_to_belt   })
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.on_item_from_belt })
end


function on_item_to_belt( obj )
  if obj:section() == "amulet" then
    subscribe()
  end
end


function on_item_from_belt( obj )
  if obj:section() == "amulet" then
    unsubscribe()
  end
end


local signals
function subscribe()
  if not signals then
    signals = {
      { signal = "on_npc_enemy_callback", fun = this.enemy_callback },
      { signal = "on_npc_hit",            fun = this.on_hit         },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:subscribe( s )
    end
  end
end

function unsubscribe()
  if signals then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:unsubscribe( s )
    end
    signals = nil
  end
end


function on_hit( obj, amount, local_direction, who, bone_index )
  if
    db.actor and inventory.on_belt( "amulet" )
    and obj:community() == "monolith"
    and who:id() == db.actor:id()
  then
    ogse.save_var( script_name() .. ".hited", true, "bool" )
    for id, is_npc in pairs( db.creature ) do
      local npc = level.object_by_id( id )
      if
        npc and is_npc and npc:alive()
        and npc:community() == "monolith"
      then
        npc:set_relation( game_object.enemy, db.actor )
      end
    end
  end
end


function enemy_callback( obj, enemy_st, result )
  local valid, enemy = validate_enemy_object( enemy_st )
  if valid then
    local is_enemy = true
    if
      obj:community() == "monolith"
      and enemy:id() == db.actor:id()
      and inventory.on_belt( "amulet" )
      and not ogse.load_var( script_name() .. ".hited", false )
    then
      is_enemy = false
    end
    if not is_enemy then
      obj:enable_memory_object( enemy, false )
      table.insert( result, is_enemy )
      return true
    end
  end
end
