-- -*- mode: lua; coding: windows-1251-dos -*-
-- DocViewer for "Authentic documents"
-- 7.9 (79mxm@rambler.ru)

function attach( sm )
  sm:subscribe({ signal = "on_drop",         fun = this.remove_doc })
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.remove_doc })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.use_doc    })
end


function is_doc_for_view( obj )
  ASSERT( obj, "obj is required" )
  return sys_ini:line_exist( obj:section(), "doc_view" )
end


function use_doc( obj )
  if is_doc_for_view( obj ) then
    subscribe()
  end
end


function remove_doc( obj )
  if device().precache_frame < 1 and is_doc_for_view( obj ) then
    local slot = get_u32( obj:section(), "slot" )
    if slot then
      local obj_in_slot = db.actor:item_in_slot( slot )
      if obj_in_slot and is_doc_for_view( obj_in_slot ) then
        return
      end
      unsubscribe()
      update()
    end
  end
end


local signals
function subscribe()
  if not signals then
    signals = {
      { signal = "on_update", fun = this.on_actor_update },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:subscribe( s )
    end
  end
end

function unsubscribe()
  if signals then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:unsubscribe( s )
    end
    signals = nil
  end
end


function on_actor_update()
  ogse_signals.get_mgr():reschedule( 500 )
  update()
end


local item_view

function update()
  if db.actor:active_slot() == 1 then
    local obj = db.actor:active_item()
    if obj and is_doc_for_view( obj ) then
      if obj:section() ~= item_view then doc_view_on( obj:section() ) end
    else
      doc_view_off()
    end
  else
    doc_view_off()
  end
end


function doc_view_on( item )
  if item then
    item_view = get_string( item, "img_path" )
    if item_view == "auto" then item_view = "docs\\" .. item end
    local pos_x = sys_ini:r_s32( item, "pos_x" )
    local pos_y = sys_ini:r_s32( item, "pos_y" )
    local X     = CUIStatic()
    X:Init( item_view, pos_x, pos_y, 0, 0 )
    get_hud():AddCustomStatic( "doc_viewer", true )
    get_hud():GetCustomStatic( "doc_viewer" ):wnd():AttachChild( X )
    item_view = item
  end
end


function doc_view_off()
  if get_hud():GetCustomStatic( "doc_viewer" ) then
    get_hud():RemoveCustomStatic( "doc_viewer" )
    item_view = nil
  end
end
