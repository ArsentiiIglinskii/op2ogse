

--local Idd
--[=[function ukiiui()
--[[
local nnngg2 = level_object_by_sid(006)
local rr5_2 = nnngg2:position()

local nnngg = level_object_by_sid(003)
local rr5 = nnngg:position()
 play_particle("explosions\\campfire_blowout", rr5_2, true, rr5_2.x, rr5_2.y, rr5_2.z, rr5.x, rr5.y, rr5.z)
--play_particle("explosions\\campfire_blowout", rr5_2, false)
]]
on_hit(Idd, 1000, 0, explosion)	 
end]=]

--[[function w33w3w3er()
	local yy = alife():create("bomba", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	Idd = yy.id
end]]


--/Спавн
--[[function spawn_obj(section, x, y, z, lv, gv, count_objects, radius_x, radius_y, radius_z)
    if section == nil or x == nil or y == nil or z == nil or lv == nil or gv == nil or count_objects == nil then
	    get_console():execute ("Bad_argument_in_function_spawn_obj(a_nil_value)")
	    return false
	end
    if count_objects > 1 and radius_x == nil and radius_y == nil and radius_z == nil then
        for a = 1, count_objects do
	       return alife():create(section, vector():set(x, y, z), lv, gv)
		end
	end
	if count_objects <= 1 then
	    return alife():create(section, vector():set(x, y, z), lv, gv)
	end
	if radius_x ~= nil and radius_y ~= nil and radius_z ~= nil and count_objects > 1 then
	  local radius_x_f, radius_y_f, radius_z_f, first_spawn, CntSpawns = 0, 0, 0, false, 0
	    for a = 1, count_objects do
		    if first_spawn then
		        radius_x_f = radius_x_f + (radius_x)
			    radius_y_f = radius_y_f + (radius_y)
			    radius_z_f = radius_z_f + (radius_z)
			end
		        alife():create(section, vector():set(x + radius_x_f, y + radius_y_f, z + radius_z_f), lv, gv)
			if not first_spawn then
			    first_spawn = true
		    end
		        CntSpawns = CntSpawns + 1
			if CntSpawns >= count_objects and first_spawn then
			    first_spawn = false
				CntSpawns = 0
			end
		end
	end
end]]

--/Спавн в инвентарь обьекта или в box
function spawn_in_inv(section, InObject, count_objects)
	if not InObject or InObject == nil then
    	InObject = db.actor 
	end
	if count_objects > 1 then
	    for a = 1, count_objects do
	        alife():create(section, InObject:position(), InObject:level_vertex_id(), InObject:game_vertex_id(), InObject:id())
	    end
	end
	if count_objects <= 1 then
        alife():create(section, InObject:position(), InObject:level_vertex_id(), InObject:game_vertex_id(), InObject:id())
	end
end

--/Удаление итемов из инвентаря ГГ
function delete_item(IName, ICntDel)      
  local cnt = db.actor:object_count()
   local ch=0
    for i=0, cnt-1 do
    local item = db.actor:object(i)
     if item and item:section() == IName then
      local sobj = alife():object(item:id())
       if sobj then 
       alife():release(sobj,true)
      ch = ch + 1
     if ch == ICntDel then 
     break 
	end 
   end 
  end
 end 
end

--/Получить предметы у НПС
--[[function get_items_sec(npc)
    if npc == nil or not npc then 
	    get_console():execute ("Bad_argument_in_function_get_items_sec(a_nil_value)")
	    return false
	end
    npc:iterate_inventory(function(dummy, Item)
        return Item:section()
    end
  ,nil)
end]]

local iTimer, last, On_Hud, action
--/Таймер с выводом на худ и без вывода
function start_timer(seconds, onhud, action_) 
    if last ~= nil  then
        iTimer = time_global() + last
    else 
        iTimer = time_global() + seconds*1000
    end 
	if onhud ~= nil then
	    On_Hud = true
	end
	action = action_
end

function timer_update()
    if iTimer then
      last = iTimer - time_global()
        if iTimer < time_global() then 
            iTimer = nil
            last = nil
			action()
        end
    end
end

function timer_hud_static()
	local hud = get_hud()
    if iTimer and On_Hud then 
		local static = hud:GetCustomStatic("hud_timer_2")
		local static_text = hud:GetCustomStatic("hud_timer_text_2")
		if not static then 
			hud:AddCustomStatic("hud_timer_2", true) 
		end
		if not static_text then 
			hud:AddCustomStatic("hud_timer_text_2", true)
			static_text = hud:GetCustomStatic("hud_timer_text_2")
		end		
        if last then
			local hours = math.floor(last/3600000)
			local minutes = math.floor(last/60000 - hours*60)
			local seconds = math.floor(last/1000 - hours*3600 - minutes*60)
			local text = string.format("%02d:%02d:%02d", hours, minutes, seconds) -- 00:00:00
			static_text:wnd():SetText(text)  
        end 
	else 
		if hud:GetCustomStatic("hud_timer_2") then 
			hud:RemoveCustomStatic("hud_timer_2")
		end
		if hud:GetCustomStatic("hud_timer_text_2") then 
			hud:RemoveCustomStatic("hud_timer_text_2")
		end		
	end
end
function stop_timer() 
    iTimer = nil
    last = nil
	local hud = get_hud()
	if hud:GetCustomStatic("hud_timer_2")~=nil then 
		hud:RemoveCustomStatic("hud_timer_2")
	end
	if hud:GetCustomStatic("hud_timer_text_2")~=nil then 
		hud:RemoveCustomStatic("hud_timer_text_2")
	end	
end

--/Смена группировки
--[[function set_community(Npc, Com)
    if Npc ~= nil and Com ~= nil then   
        Npc:set_character_community (Com, 0, 0)
	end
end]]

--/Проигрывание партикла
function play_particle(PathParticle, PosParticle, MoveParticle, p_x, p_y, p_z, p_x2, p_y2, p_z2)
  local Particle = particles_object(PathParticle)
  local ParticlePos = PosParticle
    Particle:play_at_pos(ParticlePos)
	if MoveParticle == true then
	    Particle:move_to(vector():set(p_x, p_y, p_z), vector():set(p_x2, p_y2, p_z2))	
	end
end

--/Проигрывание звука
function play_sound(PathSound, ObjPosSound, loop, SndVlm)
  local sound = xr_sound.get_safe_sound_object(PathSound)
    if type(ObjPosSound) ~= "userdata" or ObjPosSound == nil then
	    ObjPosSound = db.actor
	end
	if loop == true then
        sound:play_at_pos(ObjPosSound, ObjPosSound:position(), 1, sound_object.looped)
	else
	    sound:play_at_pos(ObjPosSound, vector():set(0,0,0), 0, sound_object.s2d)
	end
	if type(SndVlm) ~= "number" or SndVlm == nil then
	    SndVlm = 1
	end
   sound.volume = SndVlm
end

--/Остановка звука
function stop_sound(PathSound)
  local sound = xr_sound.get_safe_sound_object(PathSound)
    if sound and sound:playing() then
	    sound:stop()
	end
end

--/Остановка звука
function is_playing_sound(PathSound)
  local sound = xr_sound.get_safe_sound_object(PathSound)
    if sound and sound:playing() then
	    return true
	end
	return false
end

--[[function get_string_from_ltx(Section, ValString)
    return system_ini():r_string(Section, ValString)
end

function get_float_from_ltx(Section, ValFloat)
	return system_ini():r_float(Section, ValFloat)
end]]

--[[function IsArtefact(ItemSec)
    if string.find(ItemSec:name(), "af_") then
	    return true
	  else
	    return false
	end
end

function IsWeapon(ItemSec)
    if string.find(ItemSec:name(), "wpn_") then
	    return true
	  else
	    return false
	end
end

function IsFood(ItemSec)
  local tFood = {bread=true, kolbasa=true, conserva=true, vodka=true, energy_drink=true}
    if tFood[ItemSec] then
	    return true
	  else
	    return false
	end
end]]

--/Нанести хит

function on_hit(ObjId, Pwr, iImpulse)
	local obj = db.actor
	if ObjId ~= 0 then
		obj = level.object_by_id(ObjId)
		if not obj then
			abort("ERROR!!:function_on_hit:obj==nil")
			return false
		end
	end
    local h = hit()
    h.power = Pwr
    h.direction = vector():set (0, 0, 0)
    h.impulse = iImpulse
    h.draftsman = obj
    h.type = hit.explosion
    obj:hit(h)
end

function dbg(DbgInfo)
    get_console():execute("debug:~>"..DbgInfo)
end


function _file_update()
    this.timer_hud_static()
    this.timer_update()
end