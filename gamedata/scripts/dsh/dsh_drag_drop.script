-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_inventory_open", fun = this.on_show_inventory })
end


local focused    = {}
local subscribed = false

function on_show_inventory()
  if not subscribed then
    subscribed = {
      { signal = "on_cell_item_focus", fun = this.on_cell_item_focus },
      { signal = "on_cell_item_focus_lost", fun = this.on_cell_item_focus_lost },
      { signal = "on_cell_item_mouse", fun = this.on_cell_item_mouse },
      { signal = "on_inventory_hide",  fun = this.on_hide_inventory  },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:subscribe( s )
    end
  end
  for id, _ in pairs( focused ) do
    focused[ id ] = nil
  end
end


function on_hide_inventory()
  if subscribed then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:unsubscribe( s )
    end
    subscribed = false
  end
  for id, _ in pairs( focused ) do
    focused[ id ] = nil
  end
end


function on_cell_item_focus( obj )
  focused[ obj:id() ] = obj
end

function on_cell_item_focus_lost( obj )
  focused[ obj:id() ] = nil
end


function on_cell_item_mouse( obj, x, y, action )
  if action == ui_events.DRAG_DROP_ITEM_DROP then
    focused[ obj:id() ] = nil
    local drop_on_obj
    for id, focused_obj in pairs( focused ) do
      ASSERT(
        drop_on_obj == nil,
        "[%s]: trying to override drop_on_obj = %s by %s",
        script_name(), ( drop_on_obj and drop_on_obj:name() or "nil" ),
        focused_obj:name()
      )
      drop_on_obj = focused_obj
    end
    if drop_on_obj then
      focused[ drop_on_obj:id() ] = nil
      ogse_signals.get_mgr():call( "inv_drag_drop", obj, drop_on_obj )
    end
  end
end
