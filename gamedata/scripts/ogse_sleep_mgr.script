-- -*- mode: lua; coding: windows-1251-dos -*-
-----------------------------------------------------------------------
--- ogse_sleep_mgr.script
--- Менеджер сна и бодрствования ГГ
--- Исходная версия: xStream, Ab@dDon & DEXXX 2007-2008
--- Правки и адаптация: KamikaZze, Dusty79 (c) OGS Evolution Team
--- Версия 2: Malandrinus
--- version 2.1.1 (02/2013)
-----------------------------------------------------------------------

actor_need_surprise = false     -- подляночка


function attach( sm )
end


local sleeping_now = false
function is_sleep_active()
  return sleeping_now
end


local break_sleep_request = false -- флажок запроса на прерывание сна
function break_sleep()            -- принудительное прерывание сна
  break_sleep_request = true
end


function begin_sleep( desired_sleep_time )
  -- если кто-то запрашивал прерывание сна во время бодрствования, то
  -- сбрасываем это
  break_sleep_request = false
  db.actor:stop_talk()
  level.disable_input()
  local sleep_time = 0
  if db.actor.no_load_time then -- from sleep_manager.starter()
    sleep_time = amk.game_minutes()
    db.actor.no_load_time_sleep = db.actor.no_load_time
    db.actor.no_load_time = nil
  end

  local sm = ogse_signals.get_mgr()
  sm:call( "on_before_sleep", desired_sleep_time )
  sleeping_now = true
  local urgent_awakening = false
  local start_sleep_time = game.get_game_time()
  -- каждый час сна делим на периоды по три минуты (20 отсчётов на час)
  local sleep_counts     = math.ceil( desired_sleep_time * 20 )
  local dt_ms            = math.ceil(
    desired_sleep_time * 3600 * 1000 / sleep_counts
  )
  local prev_health      = db.actor.health

  for i = 1, sleep_counts do
    -- переводим стрелки
    level.advance_game_time( dt_ms )
    -- обновляем движковые эффекты здоровья
    db.actor:update_condition()
    sm:call( "on_update", 0 )
    -- проверяем останов по разным событиям
    if break_sleep_request then -- кто-то запросил останов сна
      urgent_awakening = true
      break
    end
    -- начался выброс
    if has_alife_info( "pre_blowout" ) then
      ogse.autohiding_msg( "blowout_not_sleep", 1500 )
      urgent_awakening = true
      break
    end
    -- начинается выброс
    if ogse_weather_mgr.get_weather_mgr():is_surge_in_process() then
      ogse.autohiding_msg( "blowout_not_sleep", 1500 )
      urgent_awakening = true
      break
    end
    -- проверяем условие останова сна по состоянию здоровья
    local cur_health = db.actor.health
    local dh         = cur_health - prev_health
    if cur_health < 0.2 and dh < 0 then
      -- здоровье снизилось до критической величины и продолжает снижаться
      ogse.autohiding_msg( "ogse_sleep_mgr_warn_4_text", 1500 )
      urgent_awakening = true
      break
    end
    prev_health = cur_health
  end

  -- db.actor:update_condition()
  db.actor.power = 1
  set_ignore_game_state_update()
  sleeping_now = false
  break_sleep_request = false
  -- ogse_weather_mgr.get_weather_mgr():update() -- обновили менеджер погоды

  -- сколько реально спали
  local awakening_time  = game.get_game_time()
  local real_sleep_time = awakening_time:diffSec( start_sleep_time )

  -- здравствуй монстры
  if actor_need_surprise then
    actor_need_surprise = false
    surprise()
  end

  -- привет кошмары
  if not urgent_awakening then -- если проснулись своим ходом
    -- выбираем и запускаем ролик сна
    local dream = dream.sleep_video_name_callback()
    -- log1("!!Trying to start dream ["..tostring(dream).."]")
    if dream == "" then dream = "without_dream" end
    game.start_tutorial( dream )
  end

  -- постпроцессы просыпания
  -- привет похмелье
  if real_sleep_time > 600 then -- если проспали больше 10-и минут
    level.add_cam_effector( "camera_effects\\prison_1.anm", 25, false, "" )
    level.add_pp_effector( "yantar_underground_psi.ppe", 2007, false )
    level.add_pp_effector( "total_recall.ppe", 2008, false )
  end

  level.enable_input()
  local snd_obj = xr_sound.get_safe_sound_object(
    [[characters_voice\human_01\stalker\states\breath\breath_2]]
  )
  if snd_obj then
    snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 15.0 )
  end
  archievements.acv_count_event(
    "acv_slp", 2160, "Засоня", math.floor( real_sleep_time / 3600 )
  )
  if db.actor.no_load_time_sleep then -- from sleep_manager.stopper_old()
    db.actor.no_load_time = db.actor.no_load_time_sleep
      + amk.game_minutes() - sleep_time
    db.actor.no_load_time_sleep = nil
  end

  -- привет мир
  sm:call( "on_sleep_finished", real_sleep_time )
end


local suprises = {
  [ "__default" ] = {
    "zombie_normal",
    "bloodsucker_weak",
    "bloodsucker_normal",
    "bloodsucker_strong",
    "burer_weak",
    "burer_strong",
    "snork_weak",
    "snork_normal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2"
    "zombie_strong",
    "zombie_immortal",
    "snork_strong",
  },
  [ "l01_escape" ] = {
    "dog_normal",
    "boar_normal",
    "flesh_strong",
    "zombie_normal",
    "esc_bandit_respawn_1",
    "esc_bandit_respawn_2",
  },
  [ "l02_garbage" ] = {
    "dog_normal",
    "boar_normal",
    "flesh_strong",
    "gar_bandit_respawn_1",
    "gar_bandit_respawn_2",
  },
  [ "l03_agroprom" ] = {
    "dog_normal",
    "boar_normal",
    "pseudodog_normal",
    "agr_soldier_regular",
    "agr_soldier_veteran",
  },
  [ "l03u_agr_underground" ] = {
    "bloodsucker_weak",
    "bloodsucker_normal",
    "bloodsucker_strong",
    "agr_bandit_respawn_1",
    "agr_bandit_respawn_2",
  },
  [ "l04_darkvalley" ] = {
    "bloodsucker_normal",
    "burer_weak",
    "burer_strong",
  },
  [ "l06_rostok" ] = {
    "bloodsucker_normal",
    "ros_killer_respawn_1",
    "ros_killer_respawn_2",
    "gar_bandit_respawn_2",
  },
  [ "l08_yantar" ] = {
    "snork_weak",
    "snork_normal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
  },
  [ "l07_military" ] = {
    "dog_normal",
    "boar_normal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "mil_killer_respawn_3",
  },
  [ "l10_radar" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "zaton" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "jupiter" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "l11_pripyat" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "pripyat" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "l12_stancia" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "l12_stancia_2" ] = {
    "zombie_strong",
    "zombie_immortal",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
    "pseudodog_strong",
    "psy_dog",
    "snork_strong",
  },
  [ "dead_city" ] = {
    "bloodsucker_normal",
    "pseudodog_strong",
    "m_controller_normal",
    "m_controller_old",
    "m_controller_old_fat",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
  },
  [ "generators" ] = {
    "snork_strong",
    "pseudodog_strong",
    "rad_zombied_respawn_1",
    "rad_zombied_respawn_2",
  },
  [ "aver" ] = {
    "snork_strong",
    "pseudodog_strong",
  },
  [ "limansk" ] = {
    "lim_zombied_respawn_1",
    "lim_zombied_respawn_2",
  },
  [ "red_forest" ] = {
    "bloodsucker_normal",
    "pseudodog_strong",
    "snork_strong",
    "psy_dog",
  },
  [ "marsh" ] = {
    "bloodsucker_normal",
    "pseudodog_strong",
    "snork_strong",
    "psy_dog",
  },
}

-- вызывается по окончанию сна
function surprise()             -- Сюрприз!!!!
  local s = suprises[ level.name() ] or suprises[ "__default" ]
  if s then
    alife():create(
      s[ math.random( table.getn( s ) ) ],
      db.actor:position():add( vector():set( math.random( -2, 2 ), 1, 0 ) ),
      db.actor:level_vertex_id(),
      db.actor:game_vertex_id()
    )
  end
end
