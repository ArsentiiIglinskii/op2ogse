-- -*- mode: lua; coding: windows-1251-dos -*-

local colors = {
  [ "health" ] = {
    { 255, 255,   0,   0 },
    { 229, 255,  51,  51 },
    { 204, 255, 102,  51 },
    { 178, 255, 204,  51 },
    { 153, 255, 255,  51 },
    { 127, 204, 255,  51 },
    { 102, 102, 255,  51 },
    {  76,  51, 255, 102 },
    {  51,  51, 255, 204 },
    {  25,  51, 204, 204 },
  },
  [ "power" ] = {
    { 240, 250, 250, 250 },
    { 240, 180, 180, 180 },
    { 190, 153, 153, 153 },
    { 178, 153, 153, 153 },
    { 153, 153, 153, 153 },
    { 127, 153, 153, 153 },
    { 102, 153, 153, 153 },
    {  76, 153, 153, 153 },
    {  51, 153, 153, 153 },
    {  25, 153, 153, 153 },
  },
  [ "wound" ] = {
    { 255, 255,   0,   0 },
    { 248, 255,   0,  20 },
    { 235, 255,  20,  20 },
    { 229, 255,  40,  40 },
    { 204, 255,  60,  60 },
    { 178, 255,  80,  80 },
    { 153, 255, 100, 100 },
    { 127, 255, 120, 120 },
    { 102, 255, 140, 140 },
    {  51, 255, 153, 153 },
  },
  [ "psy_health" ] = {
    { 255,   0,   0, 255 },
    { 248,   0,  25, 255 },
    { 235,   0,  51, 255 },
    { 229,   0,  77, 255 },
    { 204,   0, 102, 255 },
    { 178,   0, 127, 255 },
    { 153,   0, 153, 255 },
    { 127,   0, 178, 255 },
    { 102,   0, 204, 255 },
    {  51,   0, 255, 255 },
  },
  [ "radiation" ] = {
    { 255, 255,   0,   0 },
    { 248, 255, 255,  20 },
    { 235, 255, 255,  40 },
    { 229, 255, 255,  55 },
    { 204, 255, 255,  70 },
    { 178, 255, 255,  85 },
    { 153, 255, 255, 100 },
    { 127, 255, 255, 115 },
    { 102, 255, 255, 140 },
    {  51, 255, 255, 155 },
  },
  [ "starvation" ] = {
    { 255, 255,   0,   0 },
    { 229, 255,  51,  51 },
    { 204, 255, 102,  51 },
    { 178, 255, 204,  51 },
    { 153, 255, 255,  51 },
    { 127, 204, 255,  51 },
    { 102, 102, 255,  51 },
    {  76,  51, 255, 102 },
    {  51,  51, 255, 204 },
    {  25,  51, 204, 204 },
  },
}


function attach( sm )
  sm:subscribe({ signal = "on_sniper_mode", fun = this.on_sniper_mode  })
  sm:subscribe({ signal = "on_spawn",  fun = this.on_spawn  })
  sm:subscribe({ signal = "on_update", fun = this.on_update })
end


local icons
function on_spawn()
  icons = actor_cond_icons()
end


function on_update()
  ogse_signals.get_mgr():reschedule( 1000 )
  icons:update_colors()
end


function on_sniper_mode( mode )
  if mode == true then
    icons:reset()
  else
    icons:add_to_render()
  end
end


class "actor_cond_icons" ( CUIScriptWnd )
function actor_cond_icons:__init() super()
  self.initialized = false
  self.xml = CScriptXmlInit()
  self.xml:ParseFile( "maingame.xml" )
  self:Init( 0, 0, 1024, 768 )
  self.icons_scroll = self.xml:InitScrollView( "dsh_icons_scroll_view", self )
  self:init_statics()
  self:add_to_render()
end


function actor_cond_icons:add_to_render()
  get_hud():AddDialogToRender( self )
end


function actor_cond_icons:hide_static( static )
  local st = self.statics[ static ]
  if st:IsShown() then
    self.icons_scroll:RemoveWindow( st )
    st:Show( false  )
  end
end


function actor_cond_icons:init_statics()
  self.statics = {}
  for _, n in ipairs({
    "psy_health", "radiation", "starvation", "wound", "health", "power"
  }) do
    local st = self.xml:InitStatic(
      "dsh_" .. n .. "_static", self.icons_scroll
    )
    self.statics[ n ] = st
    st:Show( false )
    st:SetAutoDelete( false )
    self.icons_scroll:RemoveWindow( st )
  end
end


function actor_cond_icons:reset()
  get_hud():RemoveDialogToRender( self )
end


function actor_cond_icons:set_color( static, value )
  if value > 0 then
    local idx = math.floor( value * 10 ) + 1
    local st  = self.statics[ static ]
    st:SetColor( GetARGB( unpack( colors[ static ][ idx ] ) ) )
    self:show_static( static )
  else
    self:hide_static( static )
  end
end


function actor_cond_icons:show_static( static )
  local st = self.statics[ static ]
  if not st:IsShown() then
    self.icons_scroll:AddWindow( st, false )
    st:Show( true  )
  end
end


local light_hunger_limit = get_float(
  "actor_script_condition", "light_hunger_limit"
)

function actor_cond_icons:update_colors()
  if db.actor.health < 0.92 then
    self:set_color( "health", db.actor.health / 0.92 )
  else
    self:set_color( "health", 0 )
  end

  if db.actor.psy_health < 0.95 then
    self:set_color( "psy_health", db.actor.psy_health / 0.95 )
  else
    self:set_color( "psy_health", 0 )
  end

  if db.actor.satiety < light_hunger_limit then
    self:set_color( "starvation", db.actor.satiety / light_hunger_limit )
  else
    self:set_color( "starvation", 0 )
  end

  if db.actor.power < 0.8 then
    self:set_color( "power", db.actor.power / 0.8 )
  else
    self:set_color( "power", 0 )
  end

  if db.actor:get_bleeding() > 0.05 then
    self:set_color( "wound", 1 - ( db.actor:get_bleeding() / 5 ) )
  else
    self:set_color( "wound", 0 )
  end

  if db.actor.radiation > 0.02 then
    self:set_color( "radiation", 1 - db.actor.radiation )
  else
    self:set_color( "radiation", 0 )
  end
end
