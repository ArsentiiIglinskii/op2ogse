function attach( sm )
  sm:subscribe({ signal = "on_first_update_another_level", fun = this.on_spawn })
end

function on_spawn()
  smart_terrain.iterate_smart_terrains( function( strn )
    local name = strn:name()
    if not is_walking_smart( name ) then return end
    strn:initialize_if_needed()
    local gulag = strn.gulag
    if gulag then
      local dsh_sect = "dsh.gulag.override." .. name
      local keep_min = 0
      if sys_ini:section_exist( dsh_sect ) then
        keep_min = get_u32( dsh_sect, "dsh_walking_keep_min", 0 )
      end
      local comed = gulag:get_population_comed()
      if comed < keep_min + 1 then return end
      local walking_npc = {}
      for id, v in pairs( strn.npc_info ) do
        local npc_sobj = alife():object( id )
        if
          npc_sobj and not v.exclusive
          and
          v.stay_end < game.get_game_time()
        then
          local diff_sec = game.get_game_time():diffSec( v.stay_end )
          table.insert( walking_npc, {
            sobj     = npc_sobj,
            diff_sec = diff_sec,
          })
        end
      end
      if table.getn( walking_npc ) > keep_min then
        table.sort( walking_npc, function( a, b )
          return a.diff_sec > b.diff_sec
        end )
        local walkable  = table.getn( walking_npc ) - keep_min
        local num_to_go = math.random( 0, math.min( walkable, 3 ) )
        while num_to_go > 0 do
          local npc_sobj = walking_npc[ num_to_go ].sobj
          npc_sobj:clear_smart_terrain()
          strn:unregister_npc( npc_sobj )
          npc_sobj:brain():can_choose_alife_tasks( true )
          num_to_go = num_to_go - 1
        end
      end
    end
  end )
end


function is_walking_smart( name )
  local res      = get_bool( "dsh.gulag.free_logic", name, false )
  local dsh_sect = "dsh.gulag.override." .. name
  if sys_ini:section_exist( dsh_sect ) then
    return get_bool( dsh_sect, "dsh_walking", res )
  end
  return res
end
