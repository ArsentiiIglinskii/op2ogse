-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_monster_enemy_callback", fun = this.enemy_callback })
  sm:subscribe({ signal = "on_npc_enemy_callback", fun = this.enemy_callback })
end


local ignore_enemies = {}

function on_spawn()
  local dsh_sect = "dsh.enemy.ignore"
  if sys_ini:section_exist( dsh_sect ) then
    for _, k in ipairs( get_section_keys( dsh_sect ) ) do
      ASSERT( ( not ignore_enemies[ k ] ), "a second record for %s found", k )
      ignore_enemies[ k ] = parse_names( get_string( dsh_sect, k ) )
      for _, j in ipairs( ignore_enemies[ k ] ) do
        if ignore_enemies[ j ] then
          table.insert( ignore_enemies[ j ], k )
        else
          ignore_enemies[ j ] = { k }
        end
      end
    end
  end
end


function enemy_callback( obj, enemy_st, result )
  local valid, enemy = validate_enemy_object( enemy_st )
  if valid then
    local ignore = get_ignore_by_name_or_strn( obj )
    if ignore then
      local strn = get_smart_terrain( enemy )
      for _, ignore_name in ipairs( ignore ) do
        if
          enemy:name() == ignore_name
          or ( strn and strn:name() == ignore_name )
        then
          obj:enable_memory_object( enemy, false )
          table.insert( result, false )
          break
        end
      end
    end
  end
end


function get_ignore_by_name_or_strn( obj )
  if ignore_enemies[ obj:name() ] then
    return ignore_enemies[ obj:name() ]
  end
  local strn = get_smart_terrain( obj )
  if strn and ignore_enemies[ strn:name() ] then
    return ignore_enemies[ strn:name() ]
  end
end


function get_smart_terrain( obj )
  local sobj = alife():object( obj:id() )
  if sobj and sobj.smart_terrain_id then
    local strn_id = sobj:smart_terrain_id()
    if strn_id ~= 65535 then
      return alife():object( strn_id )
    end
  end
end
