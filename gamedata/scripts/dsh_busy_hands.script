-- -*- mode: lua; coding: windows-1251-dos -*-

-- С мутантами, имеющими такое название секции, нужно обращаться, как
-- с NPC.
local monsters_like_npc = {
  [ "skelet_ded" ] = true,      -- Лесник из Забытого леса
}


function attach( sm )
  sm:subscribe({ signal = "on_monster_death", fun = this.on_monster_death })
  sm:subscribe({ signal = "on_monster_update", fun = this.on_monster_update })
  sm:subscribe({ signal = "on_npc_death", fun = this.on_npc_death })
  sm:subscribe({ signal = "on_npc_update", fun = this.on_npc_update })
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
end


local knives = {}
function on_spawn()
  for _, k in ipairs( monster_parts.knives ) do
    knives[ k ] = true
  end
end


local nonusable_monsters = {}
function on_monster_death( victim, who )
  if monsters_like_npc[ victim:section() ] then
    return on_npc_death( victim, who )
  end
  victim:set_tip_text_default()
  victim:set_nonscript_usable( true )
  nonusable_monsters[ victim:id() ] = nil
end


function on_monster_update( obj )
  if monsters_like_npc[ obj:section() ] then
    return on_npc_update( obj )
  end
  if db.actor and db.actor:alive() and not obj:alive() then
    local dist = obj:position():distance_to( db.actor:position() )
    local info_radius = get_float( "actor", "pickup_info_radius" )
    if dist < info_radius + 1 then
      local id = obj:id()
      if actor_has_knife() then
        if nonusable_monsters[ id ] then
          obj:set_tip_text_default()
          obj:set_nonscript_usable( true )
          nonusable_monsters[ id ] = nil
        end
      else
        if not nonusable_monsters[ id ] then
          obj:set_tip_text( "dsh_cant_without_knife" )
          obj:set_nonscript_usable( false )
          nonusable_monsters[ id ] = true
        end
      end
    end
  end
end


function actor_has_knife()
  local active_item = db.actor:active_item()
  return ( active_item and knives[ active_item:section() ] )
end


local nonusable_npcs = {}
function on_npc_death( victim, who )
  victim:set_tip_text_default()
  victim:set_nonscript_usable( true )
  nonusable_npcs[ victim:id() ] = nil
end


function on_npc_update( obj )
  if db.actor and db.actor:alive() and not obj:alive() then
    local dist = obj:position():distance_to( db.actor:position() )
    local info_radius = get_float( "actor", "pickup_info_radius" )
    if dist < info_radius + 1 then
      local id = obj:id()
      if actor_has_free_hands() then
        if nonusable_npcs[ id ] then
          obj:set_tip_text_default()
          obj:set_nonscript_usable( true )
          nonusable_npcs[ id ] = nil
        end
      else
        if not nonusable_npcs[ id ] then
          obj:set_tip_text( "dsh_busy_hands" )
          obj:set_nonscript_usable( false )
          nonusable_npcs[ id ] = true
        end
      end
    end
  end
end


function actor_has_free_hands()
  local active_item = db.actor:active_item()
  return (
    ( active_item and string.find( active_item:section(), "wpn_fist_" ) )
    or
    ( not active_item )
  )
end
