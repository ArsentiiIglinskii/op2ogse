-- -*- mode: lua; coding: windows-1251-dos -*-

class "timeout_timer" ( ogse_qt.quick_timer )
function timeout_timer:__init( delay, fun) super( delay )
  self.fun = fun
end
function timeout_timer:taction()
  self.fun()
end

function timeout( delay, fun )
  local tmout = timeout_timer( delay, fun )
  tmout:start()
  return tmout
end


function op2quicksave()
  db.op2_save_compat = true
  local bad_infos = {
    "first_blowout",
    "ogse_DEBUG_relations_cleared",
  }
  local restore_infos = {}
  for _, info in ipairs( bad_infos ) do
    if db.actor:has_info( info ) then
      table.insert( restore_infos, info )
      db.actor:disable_info_portion( info )
    end
  end
  local incompat_slots = { 8, 11, 12 }
  for _, slot in ipairs( incompat_slots ) do
    local s_item = db.actor:item_in_slot( slot )
    if s_item then
      db.actor:move_to_ruck( s_item )
    end
  end
  local incompat_belt_items = {
    [ "acumm" ] = true,
  }
  local remove_from_belt = {}
  for i = 0, db.actor:belt_count() - 1 do
    local item = db.actor:item_on_belt( i )
    if incompat_belt_items[ item:section() ] or item:is_scope() then
      table.insert( remove_from_belt, item )
    end
  end
  for _, k in ipairs( remove_from_belt ) do
    db.actor:move_to_ruck( k )
  end
  amk.del_variable( "blow_started" )
  amk_mod.spawn_unspawned_respawners( true )
  cmd( "save", "op2quicksave" )
  for _, info in ipairs( restore_infos ) do
    db.actor:give_info_portion( info )
  end
  db.op2_save_compat = false
end


function set_condition( item, cond )
  item:set_condition( cond )
  local sobj = alife():object( item:id() )
  if sobj then
    local tbl = amk.get_item_params( sobj )
    tbl.condition = cond
    amk.set_item_params( tbl, sobj )
  end
end


-- http://www.amk-team.ru/forum/index.php?showtopic=6458&p=937442
--[=[

local lname = level.name()
local lvtab = GetLevelVertexes( lname )
local lvx = math.max( unpack( lvtab ) )
local lv  = math_random( 1, lvx )

local gvtab  = GetGameVertexes( lname )
local gv_min = math.min( unpack( gvtab ) )
local gv_max = math.max( unpack( gvtab ) )

--]=]
function GetLevelVertexes( level )
  local lvtab ={}
  local i = 0
  while game_graph():valid_vertex_id( i ) do
    local lv = game_graph():vertex( i ):level_vertex_id()
    local ln = alife():level_name( game_graph():vertex( i ):level_id() )
    if not lvtab[ ln ] then
      lvtab[ ln ] = {}
    end
    table.insert( lvtab[ ln ], lv )
    i = i + 1
  end
  return lvtab[ level ]
end

function GetGameVertexes( level )
  local gvtab ={}
  local i = 0
  while game_graph():valid_vertex_id( i ) do
    local ln = alife():level_name( game_graph():vertex( i ):level_id() )
    if not gvtab[ ln ] then
      gvtab[ ln ] = {}
    end
    table.insert( gvtab[ ln ], i )
    i = i + 1
  end
  return gvtab[ level ]
end


function is_enemy_around()
  for id in pairs( db.creature ) do
    if id then
      local obj = level.object_by_id( id )
      if obj and obj:is_custom_monster() and obj:alive() then
        local is_stalker = IsStalker(obj)
        local dist = obj:position():distance_to( db.actor:position() )
        local is_enemy_to_actor =
          ogse.get_npc_relation( obj, db.actor ) == "enemy"
        if
          ( ( is_stalker and is_enemy_to_actor ) or IsMonster( obj ) )
          and
          ( dist < 5 or obj:see( db.actor ) )
        then
          return true
        end
      end
    end
  end
  return false
end


-- http://www.amk-team.ru/forum/index.php?showtopic=10339&page=47#entry910319
function get_actor_values(type, cycle_length)
  if cycle_length then
    if type == "float" then
      get_console():execute("clear_log")
      for i = 1, cycle_length do
        local value = db.actor:get_actor_float(i)
        if value then log1("Float value = "..value.."; Position = "..i) end
      end
      flush_log()
    elseif type == "integer" then
      get_console():execute("clear_log")
      for i = 1, cycle_length do
        local value = db.actor:get_actor_int(nil, i)
        if value then log1("Integer value = "..value.."; Position = "..i) end
      end
      flush_log()
    end
  end
end

function get_actor_condition_values(cycle_length)
  get_console():execute("clear_log")
  for i = 1, cycle_length do
    local value = db.actor:get_actor_condition_float(i)
    if value then log1("Float value = "..value.."; Position = "..i) end
  end
  flush_log()
end


--[=[
-- http://www.amk-team.ru/forum/index.php?showtopic=6185&p=945289
local weapon_states = {
  idle      = 0,
  fire      = 1,
  fire2     = 2,
  reload    = 3,
  showing   = 4,
  hiding    = 5,
  hidden    = 6,
  misfire   = 7,
  mag_empty = 8,
  switch    = 9
}
local state = db.actor:active_item():get_hud_item_state()
if state == weapon_states.reload then
end
--]=]


function remove_quotes( s )
  local  s2 = string.gsub( s, "[«»\"\']", "" )
  return s2
end


function strip_quotes( s )
  return string.gsub( s, "^%s*[«»\"\']+%s*(.+)%s*[«»\"\']+%s*$", "%1" )
end


function get_art_levels()
  local arts = {}
  for anomaly, info in pairs( amk_mod.anom_recept_komp.anomalii ) do
    for info_key, recept in pairs( info.recepti ) do
      if recept.cel and recept.komp then
        local targets = {}
        local parts   = {}
        for k, _ in pairs( recept.cel  ) do
          table.insert( targets, k )
        end
        for k, _ in pairs( recept.komp ) do
          table.insert( parts, k   )
        end
        if
          table.getn( targets ) == 1
          and
          string.find( targets[ 1 ], "^af_" )
          and
          table.getn( parts ) == 1
        then
          local tgt = targets[ 1 ]
          arts[ tgt ] = {
            [ "next" ] = {},
            [ "prev" ] = { parts[ 1 ] },
          }
        end
      end
    end
  end

  for af, data in pairs( arts ) do
    local next_arts = { af }
    local process   = { data.prev[ 1 ] }
    while table.getn( process ) > 0 do
      local af_prev = table.remove( process, 1 )
      if arts[ af_prev ] then
        for _, k in ipairs( next_arts ) do
          table.insert( arts[ af_prev ].next, k )
        end
        table.insert( next_arts, 1, af_prev )
        table.insert( process,   arts[ af_prev ].prev[ 1 ] )
        table.insert( data.prev, arts[ af_prev ].prev[ 1 ] )
      end
    end
  end

  -- Для Симбиона сделано исключение. Т.к. он не является модификацией
  -- какого-то одного артефакта, он будет считаться артефактом первого
  -- уровня. Поэтому, принудительно сделаю его артефактом третьего
  -- уровня.
  if not arts[ "af_simbion" ] then
    arts[ "af_simbion" ] = {
      [ "next" ] = { "af_arhara_globus" },
      [ "prev" ] = { "", "" },
    }
  end

  return arts
end


function set_inv_item_weight( obj, weight )
  obj:set_inventory_item_float( nil, weight, 164 )
end


function change_inv_item_weight( id, weight )
  local obj = level.object_by_id( id )
  if obj then
    local cur_weight = obj:get_inventory_item_float( 164 )
    set_inv_item_weight( obj, cur_weight + weight )
  end
end


function actor_get_art_ln( level )
  local arts = get_art_levels()
  for i = 0, db.actor:object_count() - 1 do
    local obj  = db.actor:object( i )
    local sect = obj:section()
    if
      arts[ sect ]
      and
      table.getn( arts[ sect ].prev ) == level
      and
      table.getn( arts[ sect ].next ) > 0
    then
      if db.actor:is_in_ruck( obj ) then return obj end
    end
  end
  return nil
end

function actor_has_art_l1()
  if actor_get_art_ln( 1 ) then return true else return false end
end

function actor_give_art_l1()
  local obj = actor_get_art_ln( 1 )
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end

function actor_has_art_l2()
  if actor_get_art_ln( 2 ) then return true else return false end
end

function actor_give_art_l2()
  local obj = actor_get_art_ln( 2 )
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end

function actor_has_art_l3()
  if actor_get_art_ln( 3 ) then return true else return false end
end

function actor_give_art_l3()
  local obj = actor_get_art_ln( 3 )
  if obj then
    ogse.remove_item_from_inventory( obj )
    news_manager.relocate_item( db.actor, "out", obj:section() )
  end
end


-- Заспаунить на АТП артефакты, которые требует Калинин, что бы рассказать о
-- переходе на Свалку.
function spawn_arts_for_kalinin()
  local arts = {
    "af_dummy_glassbeads",  -- мамины бусы
    "af_electra_moonlight", -- лунный свет
    "af_electra_flash",     -- вспышка
  }
  local radius = 200
  for _, sect in ipairs( arts ) do
    local sobj
    while not sobj do
      sobj = amk_anoms.generate_art(
        level.name(), sect, function( maybe_pos )
          if db.actor:position():distance_to( maybe_pos ) < radius then
            return false
          else
            return true
          end
        end
      )
    end
  end
end


-- Создать свободного моба, которого не затянет в какой-нибудь гулаг.
function create_free_monster( ... )
  se_monster.modified_params = {
    [ "custom" ] = "[smart_terrains]\nnone = true\n",
  }
  return alife():create( unpack( arg ) )
end
