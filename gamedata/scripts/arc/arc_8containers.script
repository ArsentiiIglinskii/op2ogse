-- -*- mode: lua; coding: windows-1251-dos -*-

local cfg_containers = {}
local inv_containers = {}

local menu_showed = false


function get_cfg_containers_number()
  return table.getn( cfg_containers )
end


function get_inv_containers_number()
  return table.getn( inv_containers )
end


function get_cfg_index( cont_section )
  for i = 1, get_cfg_containers_number() do
    if cont_section == cfg_containers[ i ].section then
      return i
    end
  end
  return 0
end


function get_inv_index( cont_id )
  for i = 1, get_inv_containers_number() do
    if inv_containers[ i ].id == cont_id then
      return i
    end
  end
  return 0
end


function get_inv_index_by_type( tp, idx1, idx2 )
  if not idx1 then idx1 = 1 end
  if not idx2 then idx2 = get_inv_containers_number() end
  local step = ( idx2 >= idx1 ) and 1 or -1
  for i = idx1, idx2, step do
    if inv_containers[ i ].type == tp then
      return i
    end
  end
  return 0
end


function get_inv_container_id( cont_index )
  return inv_containers[ cont_index ].id
end


function get_inv_container_arts( cont_index )
  return inv_containers[ cont_index ].arts
end


function get_inv_container_conds( cont_index )
  return inv_containers[ cont_index ].conds
end


function get_inv_container_cds( cont_index )
  return inv_containers[ cont_index ].cds
end


function get_cfg_container( n )
  return cfg_containers[ n ]
end


function get_inv_container( n )
  return inv_containers[ n ]
end


function get_container_arts( cont_id )
  local sobj = alife():object( cont_id )
  if not sobj then return {} end
  local pk = get_netpk( sobj, 1 )
  ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  local cd_string = data.custom_data:getStringRaw()
  if ( not cd_string ) or cd_string == "" then return {} end
  return parse_names( cd_string )
end


function set_container_arts( cont_id, arts )
  local sobj = alife():object( cont_id )
  if not sobj then return false end
  local pk = get_netpk( sobj, 1 )
  ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.custom_data:setStringRaw( table.concat( arts, ',' ) )
  pk:set( data )
  return true
end


local radiation_v = get_float( "actor_condition", "radiation_v" )

function register_container( cont_id, cont_section, cont_arts )
  if get_inv_index( cont_id ) > 0 then -- Уже зарегистрирован
    return true
  end

  local f = get_cfg_index( cont_section )
  if f == 0 then
    local tmp = {}
    tmp.section = cont_section
    tmp.slots = get_u32( cont_section, "container_slots" )
    ASSERT(
      tmp.slots,
      "[%s]: container_slots not defined in [%s]", script_name(), cont_section
    )
    tmp.protection = get_float( cont_section, "container_protection", 0 )
    if tmp.protection > 0 then
      tmp.protection = tmp.protection * radiation_v
    end
    tmp.tx         = get_u32( cont_section, "inv_grid_x" )
    tmp.ty         = get_u32( cont_section, "inv_grid_y" )
    tmp.weight     = get_float( cont_section, "inv_weight" )
    table.insert( cfg_containers, tmp )
    f = table.getn( cfg_containers )
  end

  local cnt = {
    [ "arts"    ] = {},
    [ "cds"     ] = {},
    [ "conds"   ] = {},
    [ "id"      ] = cont_id,
    [ "type"    ] = f,
  }

  local arts = cont_arts
  if not arts then
    arts = get_container_arts( cont_id )
  end
  local s = cfg_containers[ f ].slots
  ASSERT(
    table.getn( arts ) <= s * 3,
    "[%s]: unexpected arts: %s > %s", script_name(), table.getn( arts ), s * 3
  )

  dsh.change_inv_item_weight( cont_id, cfg_containers[ f ].weight, true )
  arc_radiation.reset_item_radiation( cont_id )
  for i = 1, s do
    if ( not arts ) or ( not arts[ i ] ) or arts[ i ] == "_"  then
      cnt.arts[ i ] = 0
    else
      local a = arc_arts.register_artefact( arts[ i ], 1, cont_id )
      ASSERT(
        a > 0,
        "[%s]: unknown artefact %s in slot %s", script_name(), arts[ i ], i
      )
      cnt.arts[  i ] = a
      cnt.conds[ i ] = tonumber( arts[ i + s ] )
      cnt.cds[   i ] = arts[ i + s * 2 ]
      local protection = cfg_containers[ f ].protection
      if protection > 0 then
        local art_section = arts[ i ]
        local belt_rad    = get_float( art_section, "radiation_restore_speed", 0 )
        if cnt.conds[ i ] > 0 and belt_rad > protection then
          arc_radiation.change_inv_arts_radiation(
            belt_rad - protection, cont_id
          )
        end
      end
    end
  end
  table.insert( inv_containers, cnt )

  return true
end


function respawn_container( cont_index )
  local ic = inv_containers[ cont_index ]
  local a  = {}
  local s  = cfg_containers[ ic.type ].slots
  for i = 1, s do
    if ic.arts[ i ] > 0 then
      a[ i         ] = arc_arts.get_art_section( ic.arts[ i ] )
      a[ i + s     ] = ic.conds[ i ] or "_"
      a[ i + s * 2 ] = ic.cds[   i ] or "_"
    else
      a[ i         ] = "_"
      a[ i + s     ] = "_"
      a[ i + s * 2 ] = "_"
    end
  end
  set_container_arts( inv_containers[ cont_index ].id, a )
end


function remove_container( cont_index )
  arc.remove_obj( inv_containers[ cont_index ].id )
end


function on_lose_container( cont_id )
  if menu_showed then return end
  local n = get_inv_index( cont_id )
  local f = inv_containers[ n ].type

  -- Контейнер выброшен. Удалить контейнер и арты в нём из списка
  local arts  = inv_containers[ n ].arts
  local conds = inv_containers[ n ].conds
  for i = 1, table.getn( arts ) do
    if arts[ i ] > 0 then
      arc_arts.register_artefact(
        arc_arts.get_art_section( arts[ i ] ), -1, cont_id
      )
      local protection = cfg_containers[ f ].protection
      if protection > 0 then
        local art_section = arc_arts.get_art_section( arts[ i ] )
        local belt_rad    = get_float( art_section, "radiation_restore_speed", 0 )
        if conds[ i ] > 0 and belt_rad > protection then
          arc_radiation.change_inv_arts_radiation( -( belt_rad - protection ) )
        end
      end
    end
  end
  table.remove( inv_containers, n )
end


function set_menu_showed( f )
  menu_showed = f
end

function is_menu_showed()
  return menu_showed
end
