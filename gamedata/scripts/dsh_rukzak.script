-- -*- mode: lua; coding: windows-1251-dos -*-
local override_game_type = {
  [ "amk_metka" ] = "",
}

function attach( sm )
  sm:subscribe({ signal = "on_drop", fun = this.on_drop })
  sm:subscribe({ signal = "on_use",  fun = this.on_use })
  sm:subscribe({ signal = "on_rukzak_use", fun = this.on_rukzak_use })
end


function on_drop( obj, sobj )
  if not sobj then return end
  local sect = obj:section()
  if sect == "treasure_item" and sobj.parent_id == 65535 then
    ogse.remove_item( obj )
    spawn_magic_rukzak( sect )
    level.start_stop_menu( level.main_input_receiver(), true )
    return true
  end
end


function on_use( obj, sobj )
  local sect = obj:section()
  if sect == "treasure_item" then
    spawn_magic_rukzak( sect )
    level.start_stop_menu( level.main_input_receiver(), true )
    return true
  end
end


function spawn_magic_rukzak( sect )
  if ui_mm_opt_main.GetOption( "magic_rukzak_enabled" ) then
    local real = get_string( sect, "real_item_section" )
    local pos  = db.actor:position()
    local new  = alife():create(
      real, pos, db.actor:level_vertex_id(), db.actor:game_vertex_id()
    )
  else
    news_main.create_treasurebox()
  end
end


function on_rukzak_use( obj )
  local rukzak = ui_rukzak( obj:id() )
  level.start_stop_menu( rukzak, true )
end


function load_rukzak( id )
  local prefix     = "dsh_rukzak." .. id
  local sections   = ogse.load_var( prefix .. ".sections", {}, "array" )
  local conds      = ogse.load_var( prefix .. ".conds",    {}, "array" )
  local game_types = ogse.load_var( prefix .. ".types",    {}, "array" )
  local counts     = ogse.load_var( prefix .. ".counts",   {}, "array" )
  local infos      = ogse.load_var( prefix .. ".infos",    {}, "array" )
  local data = {}
  for i, sect in ipairs( sections ) do
    local cond = conds[ i ]
    local info = infos[ i ] or ""
    local key  = sect .. ":" .. cond .. ":" .. info
    local item = {
      [ "section"   ] = sect,
      [ "condition" ] = tonumber( cond ),
      [ "game_type" ] = ( override_game_type[ sect ] or game_types[ i ] ),
      [ "count"     ] = tonumber( counts[ i ] ),
      [ "info"      ] = info,
      [ "key"       ] = key,
    }
    table.insert( data, item )
  end
  return data
end


function save_rukzak( id, data )
  local prefix = "dsh_rukzak." .. id
  local sections   = {}
  local conds      = {}
  local game_types = {}
  local counts     = {}
  local infos      = {}
  for _, item in ipairs( data ) do
    if item.count > 0 then
      table.insert( sections,   item.section )
      table.insert( conds,      string.format( "%.2f", item.condition ) )
      table.insert( game_types, ( item.game_type or "" ) )
      table.insert( counts,     item.count   )
      table.insert( infos,      item.info    )
    end
  end
  if table.getn( sections ) > 0 then
    ogse.save_var( prefix .. ".sections", sections,   "array" )
    ogse.save_var( prefix .. ".conds",    conds,      "array" )
    ogse.save_var( prefix .. ".types",    game_types, "array" )
    ogse.save_var( prefix .. ".counts",   counts,     "array" )
    ogse.save_var( prefix .. ".infos",    infos,      "array" )
  else
    ogse.delete_var( prefix .. ".sections" )
    ogse.delete_var( prefix .. ".conds"    )
    ogse.delete_var( prefix .. ".types"    )
    ogse.delete_var( prefix .. ".counts"   )
    ogse.delete_var( prefix .. ".infos"    )
  end
end


function get_item_info( obj )
  local sect = obj:section()
  local info
  if string.find( sect, "arc_art_box_" ) then
    local sobj = alife():object( obj:id() )
    local data = m_net_utils.get_item_data( sobj )
    info = data.custom or ""
  elseif obj:is_weapon_magazined() then
    info = get_wpn_info( obj )
  else
    info = ""
  end
  return info
end


function get_wpn_info( obj )
  return ""
end


function spawn_ammo_in_inv( sect, box_size )
  return alife():create_ammo(
    sect,
    db.actor:position(),
    db.actor:level_vertex_id(),
    db.actor:game_vertex_id(),
    db.actor:id(),
    box_size
  )
end


function get_ammo_box_size( sect )
  local box_size
  if dunin_ammo.ammo[ sect ] then
    box_size = dunin_ammo.ammo[ sect ].box
  else
    box_size = sys_ini:r_u32( sect, "box_size" )
  end
  return box_size
end


function bind( obj )
  local new_binder = generic_rukzak_binder( obj )
  obj:bind_object( new_binder )
end


class "generic_rukzak_binder" ( object_binder )
function generic_rukzak_binder:__init( obj ) super( obj )
  self.am = ogse_signals.get_mgr()
  self.object:set_nonscript_usable( true )
  self.object:set_tip_text( "st_search_treasure" )
end


function generic_rukzak_binder:update( delta )
  object_binder.update( self, delta )
  self.object:set_callback(
    callback.use_object, generic_rukzak_binder.use_callback, self
  )
  self.am:call( "on_physic_obj_update", self.object )
end


function generic_rukzak_binder:net_destroy()
  self.object:set_callback( callback.use_object, nil )
  object_binder.net_destroy( self )
end


function generic_rukzak_binder:use_callback( obj, who )
  self.am:call( "on_rukzak_use", self.object )
end


class "rukzak_item" ( CUIListItemEx )
function rukzak_item:__init( name, cond, cnt ) super()
  self:SetWndRect( 0, 0, 475, 22 )
  local ca = 255
  local cr = 216
  local cg = 186
  local cb = 140

  self.item_name = CUIStatic()
  self.item_name:SetAutoDelete( true )
  self:AttachChild( self.item_name )
  self.item_name:SetWndRect( 0, 0, 370, 22 )
  self.item_name:SetText( name )
  self.item_name:SetFont( GetFontLetterica18Russian() )
  self.item_name:SetTextColor( ca, cr, cg, cb )

  self.item_cond = CUIStatic()
  self.item_cond:SetAutoDelete( true )
  self:AttachChild( self.item_cond )
  self.item_cond:SetWndRect( 375, 0, 40, 22 )
  self.item_cond:SetText( string.format( "%.1f%%", cond ) )
  self.item_cond:SetTextAlign( CGameFont.alRight )
  self.item_cond:SetFont( GetFontLetterica16Russian() )
  self.item_cond:SetTextColor( ca, cr, cg, cb )

  self.item_cnt = CUIStatic()
  self.item_cnt:SetAutoDelete( true )
  self:AttachChild( self.item_cnt )
  self.item_cnt:SetWndRect( 435, 0, 20, 22 )
  self.item_cnt:SetText( "x" .. cnt )
  self.item_cnt:SetTextAlign( CGameFont.alRight )
  self.item_cnt:SetFont( GetFontLetterica16Russian() )
  self.item_cnt:SetTextColor( ca, cr, cg, cb )
end


class "ui_rukzak" ( CUIScriptWnd )
function ui_rukzak:__init( owner_id ) super()
  self.changed   = false
  self.index_other = {}
  self.index_our   = {}
  self.owner_id  = owner_id
  self.xml_fname = "ui_dsh_rukzak.xml"
  self:InitControls()
  self:InitCallBacks()
  self:FillOtherList()
  self:FillOurList()
end
function ui_rukzak:__finalize() end


function ui_rukzak:InitControls()
  self:Init( 50, 50, 500, 600 )
  self:Enable( true )

  local xml = CScriptXmlInit()
  xml:ParseFile( self.xml_fname )

  self.dialog = xml:InitFrame( "main_dialog:dialog", self )

  self.dlg_other = ui_rukzak_other()
  self.dlg_other:InitControls( 10, 50, xml, self )
  self.dialog:AttachChild( self.dlg_other )

  self.dlg_our = ui_rukzak_our()
  self.dlg_our:InitControls( 10, 50, xml, self )
  self.dlg_our:Show( false )
  self.dialog:AttachChild( self.dlg_our )

  self.btn_4 = xml:Init3tButton( "main_dialog:btn_4", self.dialog )
  self:Register( self.btn_4, "btn_4" )
  self.btn_4:Enable( false )
  self:Register(
    xml:Init3tButton( "main_dialog:btn_quit", self.dialog ),
   "btn_quit"
  )

  self.tab = xml:InitTab( "main_dialog:tab", self.dialog )
  self:Register( self.tab, "tab" )
end


function ui_rukzak:InitCallBacks()
  self:AddCallback( "tab", ui_events.TAB_CHANGED, self.OnTabChange, self )
  self:AddCallback( "btn_4", ui_events.BUTTON_CLICKED, self.rep_btn, self )
  self:AddCallback( "btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self )
  self:AddCallback(
    "list_other", ui_events.LIST_ITEM_CLICKED, self.OnListItemClicked, self
  )
  self:AddCallback(
    "list_other", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnListItemDbClicked,
    self
  )
  self:AddCallback(
    "list_our", ui_events.LIST_ITEM_CLICKED, self.OnListItemClicked, self
  )
  self:AddCallback(
    "list_our", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnListItemDbClicked,
    self
  )
end


function ui_rukzak:OnKeyboard( dik, keyboard_action )
  CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )
  if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
    -- на выход повесим Esc
    if dik == DIK_keys.DIK_ESCAPE then
      self:on_quit()
    end
  end
  return true
end


function ui_rukzak:OnTabChange()
  self.dlg_other:Show( false )
  self.dlg_our:Show( false )
  local i = self.tab:GetActiveIndex()
  if     i == 0 then
    self.dlg_other:Show( true )
  elseif i == 1 then
    self.dlg_our:Show( true )
  end
  self.btn_4:Enable( false )
end


function ui_rukzak:rep_btn()
  local ui_item = self:get_selected_item()
  if not ui_item then return end
  self.changed = true
  if ui_item.data.game_objs then
    self:move_from_our( ui_item )
  else
    self:move_from_other( ui_item )
    if self.ui_list_other:GetSize() == 0 then
      ogse.spawn_item_in_inv( "treasure_item" )
      local obj = level.object_by_id( self.owner_id )
      ogse.remove_item( obj )
      self:on_quit()
    end
  end
end


function ui_rukzak:move_from_other( ui_item )
  local item = ui_item.data
  local ui_our = self.index_our[ item.key ]
  local our
  if ui_our then
    our = ui_our.data
  else
    our = {
      [ "section"   ] = item.section,
      [ "condition" ] = item.condition,
      [ "game_type" ] = item.game_type,
      [ "game_objs" ] = {},
      [ "info"      ] = item.info,
      [ "key"       ] = item.key,
    }
  end
  local sobj
  if our.game_type == "ammo" then
    if not our.count then our.count = 0 end
    local box_size = get_ammo_box_size( item.section )
    if item.count > box_size then
      sobj = spawn_ammo_in_inv( item.section, box_size )
      item.count = item.count - box_size
      our.count  = our.count  + box_size
    else
      sobj = spawn_ammo_in_inv( item.section, item.count )
      our.count  = our.count  + item.count
      item.count = 0
    end
  else
    sobj = ogse.spawn_item_in_inv( item.section )
    if string.find( item.section, "arc_art_box_" ) then
      local data  = m_net_utils.get_item_data( sobj )
      data.custom = item.info or ""
      m_net_utils.get_item_data( data, sobj )
    end
    item.count = item.count - 1
  end
  if ui_our then
    ui_our.item_cnt:SetText(
      "x" .. ( our.count or table.getn( our.game_objs ) )
    )
  else
    ui_our = rukzak_item(
      ui_item.item_name:GetText(), our.condition,
      ( our.count or table.getn( our.game_objs ) )
    )
    ui_our.data = our
    self.index_our[ our.key ] = ui_our
    self.ui_list_our:AddItem( ui_our )
  end
  level.client_spawn_manager():add(
    sobj.id, -1, function( id, obj )
      if our.condition < 100 then
        dsh.set_condition( obj, our.condition / 100 )
      end
      table.insert( our.game_objs, obj )
      ui_our.item_cnt:SetText(
        "x" .. ( our.count or table.getn( our.game_objs ) )
      )
    end
  )
  if item.count > 0 then
    ui_item.item_cnt:SetText( "x" .. item.count )
  else
    local pos = self.ui_list_other:GetItemPos( ui_item )
    self.ui_list_other:RemoveItem( pos )
    self.index_other[ item.key ] = nil
  end
end


function ui_rukzak:move_from_our( ui_item )
  local item = ui_item.data
  local obj      = table.remove( item.game_objs, 1 )
  local ui_other = self.index_other[ item.key ]
  local other
  if ui_other then
    other = ui_other.data
  else
    other = {
      [ "section"   ] = item.section,
      [ "condition" ] = item.condition,
      [ "game_type" ] = item.game_type,
      [ "count"     ] = 0,
      [ "info"      ] = item.info,
      [ "key"       ] = item.key,
    }
    table.insert( self.items_other, other )
  end
  local size
  if item.game_type == "ammo" then
    size = dunin_ammo.get_ammo_size( obj )
    item.count = item.count - size
  else
    size = 1
  end
  other.count = other.count + size
  if ui_other then
    ui_other.item_cnt:SetText( "x" .. other.count )
  else
    ui_other = rukzak_item(
      ui_item.item_name:GetText(), other.condition, other.count
    )
    ui_other.data = other
    self.index_other[ other.key ] = ui_other
    self.ui_list_other:AddItem( ui_other )
  end
  if table.getn( item.game_objs ) > 0 then
    ui_item.item_cnt:SetText(
      "x" .. ( item.count or table.getn( item.game_objs ) )
    )
  else
    local pos = self.ui_list_our:GetItemPos( ui_item )
    self.ui_list_our:RemoveItem( pos )
    self.index_our[ item.key ] = nil
  end
  ogse.remove_item_from_inventory( obj )
end


function ui_rukzak:get_current_list_box()
  local list_box
  local i = self.tab:GetActiveIndex()
  if     i == 0 then
    list_box = self.ui_list_other
  elseif i == 1 then
    list_box = self.ui_list_our
  end
  return list_box
end


function ui_rukzak:get_selected_item()
  local list_box = self:get_current_list_box()
  local item
  if list_box:GetSize() > 0 then
    local itm_index = list_box:GetSelectedItem()
    if itm_index >= 0 then
      item = list_box:GetItem( itm_index )
    end
  end
  return item
end


function ui_rukzak:on_quit()
  if self.changed then
    save_rukzak( self.owner_id, self.items_other )
  end
  self:GetHolder():start_stop_menu( self, true )
  collectgarbage( "collect" )
end


function ui_rukzak:OnListItemClicked()
  local item = self:get_selected_item()
  if not item then return end
  self.btn_4:Enable( true )
end


function ui_rukzak:OnListItemDbClicked()
  self:rep_btn()
end


function ui_rukzak:FillOtherList()
  self.items_other = load_rukzak( self.owner_id )
  for _, item in ipairs( self.items_other ) do
    local sect = item.section
    local name = sys_ini:r_string_wq( sect, "inv_name_short" )
    if not name then
      name = sys_ini:r_string_wq( sect, "inv_name" )
    end
    name = game.translate_string( name )
    local ui_item = rukzak_item( name, item.condition, item.count )
    ui_item.data = item
    self.index_other[ item.key ] = ui_item
    self.ui_list_other:AddItem( ui_item )
  end
end


function ui_rukzak:FillOurList()
  local by_key = {}
  local items  = {}
  for i = 0, db.actor:object_count() - 1 do
    local obj = db.actor:object( i )
    if self:can_include_into_list( obj ) then
      local sect = obj:section()
      local cond = string.format( "%.2f", obj:condition() * 100 )
      local info = get_item_info( obj )
      local key  = sect .. ":" .. cond .. ":" .. info
      local item = by_key[ key ]
      if item then
        table.insert( by_key[ key ].game_objs, obj )
      else
        item = {
          [ "section"   ] = sect,
          [ "condition" ] = tonumber( cond ),
          [ "game_objs" ] = { obj },
          [ "game_type" ] = self:get_game_type( obj ),
          [ "info"      ] = info,
          [ "key"       ] = key,
        }
        by_key[ key ] = item
        table.insert( items, item )
      end
      if item.game_type == "ammo" then
        if item.count then
          item.count = item.count + dunin_ammo.get_ammo_size( obj )
        else
          item.count = dunin_ammo.get_ammo_size( obj )
        end
      end
    end
  end
  for _, item in ipairs( items ) do
    local sect = item.section
    local name = sys_ini:r_string_wq( sect, "inv_name_short" )
    if not name then
      name = sys_ini:r_string_wq( sect, "inv_name" )
    end
    name = game.translate_string( name )
    local ui_item = rukzak_item(
      name, item.condition, ( item.count or table.getn( item.game_objs ) )
    )
    ui_item.data = item
    self.index_our[ item.key ] = ui_item
    self.ui_list_our:AddItem( ui_item )
  end
end


function ui_rukzak:get_game_type( obj )
  local game_type
  local sect = obj:section()
  if override_game_type[ sect ] then
    game_type = override_game_type[ sect ]
  elseif obj:is_ammo() then
    game_type = "ammo"
  elseif obj:is_weapon_magazined() then
    game_type = "weapon"
  elseif obj:is_outfit() then
    game_type = "outfit"
  elseif obj:is_artefact() then
    game_type = "artefact"
  elseif obj:is_grenade() then
    game_type = "grenade"
  elseif obj:is_missile() then
    game_type = "missile"
  elseif obj:is_scope() then
    game_type = "scope"
  elseif obj:is_silencer() then
    game_type = "silencer"
  elseif obj:is_grenade_launcher() then
    game_type = "gl"
  elseif obj:is_medkit() then
    game_type = "medkit"
  elseif obj:is_antirad() then
    game_type = "antirad"
  elseif obj:is_food_item() then
    game_type = "food"
  elseif obj:is_bottle_item() then
    game_type = "bottle"
  elseif obj:is_eatable_item() then
    game_type = "eatable"
  end
  return game_type
end


function ui_rukzak:can_include_into_list( item )
  if db.actor:is_in_ruck( item ) then
    local sect = item:section()
    if not get_bool( sect, "quest_item" ) then
      local igw = sys_ini:r_u32( sect, "inv_grid_width",  0 )
      local igh = sys_ini:r_u32( sect, "inv_grid_height", 0 )
      if igw > 0 and igh > 0 then
        return true
      end
    end
  end
  return false
end


class "ui_rukzak_other" ( CUIWindow )
function ui_rukzak_other:__init() super() end
function ui_rukzak_other:__finalize()     end


function ui_rukzak_other:InitControls( x, y, xml, handler )
  self:Init( x, y, 485, 500 )
  self:SetAutoDelete( true )

  self.bk = xml:InitFrame( "list_frame", self )

  handler.ui_list_other = xml:InitList( "tab_other:list", self )
  handler.ui_list_other:ShowSelectedItem( true )
  handler:Register( handler.ui_list_other, "list_other" )
end


class "ui_rukzak_our" ( CUIWindow )
function ui_rukzak_our:__init() super() end
function ui_rukzak_our:__finalize()     end


function ui_rukzak_our:InitControls( x, y, xml, handler )
  self:Init( x, y, 485, 500 )
  self:SetAutoDelete( true )

  self.bk = xml:InitFrame( "list_frame", self )

  handler.ui_list_our = xml:InitList( "tab_our:list", self )
  handler.ui_list_our:ShowSelectedItem( true )
  handler:Register( handler.ui_list_our, "list_our" )
end
