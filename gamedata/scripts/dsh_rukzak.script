-- -*- mode: lua; coding: windows-1251-dos -*-
function attach( sm )
  sm:subscribe({ signal = "on_drop", fun = this.on_drop })
  sm:subscribe({ signal = "on_rukzak_use", fun = this.on_use })
end


local st = {}


function on_drop( obj, sobj )
  if not sobj then return end
  local sect = obj:section()
  if sect == "treasure_item" and sobj.parent_id == 65535 then
    local real = get_string( sect, "real_item_section" )
    ogse.remove_item( obj )
    local pos = db.actor:position()
    local new = alife():create(
      real, pos, db.actor:level_vertex_id(), db.actor:game_vertex_id()
    )
    return true
  end
end


function on_use( obj )
  local rukzak = ui_rukzak( obj:id() )
  level.start_stop_menu( rukzak, true )
end


function bind( obj )
  local new_binder = generic_rukzak_binder( obj )
  obj:bind_object( new_binder )
end


class "generic_rukzak_binder" ( object_binder )
function generic_rukzak_binder:__init( obj ) super( obj )
  self.am = ogse_signals.get_mgr()
  self.object:set_nonscript_usable( true )
  self.object:set_tip_text( "st_search_treasure" )
end


function generic_rukzak_binder:update( delta )
  object_binder.update( self, delta )
  self.object:set_callback(
    callback.use_object, generic_rukzak_binder.use_callback, self
  )
  self.am:call( "on_physic_obj_update", self.object )
end


function generic_rukzak_binder:net_destroy()
  self.object:set_callback( callback.use_object, nil )
  object_binder.net_destroy( self )
end


function generic_rukzak_binder:use_callback( obj, who )
  self.am:call( "on_rukzak_use", self.object )
end


class "rukzak_item" ( CUIListItemEx )
function rukzak_item:__init( name, cond, cnt ) super()
  self:SetWndRect( 0, 0, 475, 22 )
  local ca = 255
  local cr = 216
  local cg = 186
  local cb = 140

  self.item_name = CUIStatic()
  self.item_name:SetAutoDelete( true )
  self:AttachChild( self.item_name )
  self.item_name:SetWndRect( 0, 0, 370, 22 )
  self.item_name:SetText( name )
  self.item_name:SetFont( GetFontLetterica18Russian() )
  self.item_name:SetTextColor( ca, cr, cg, cb )

  self.item_cond = CUIStatic()
  self.item_cond:SetAutoDelete( true )
  self:AttachChild( self.item_cond )
  self.item_cond:SetWndRect( 375, 0, 40, 22 )
  self.item_cond:SetText( string.format( "%.1f%%", cond ) )
  self.item_cond:SetTextAlign( CGameFont.alRight )
  self.item_cond:SetFont( GetFontLetterica16Russian() )
  self.item_cond:SetTextColor( ca, cr, cg, cb )

  self.item_cnt = CUIStatic()
  self.item_cnt:SetAutoDelete( true )
  self:AttachChild( self.item_cnt )
  self.item_cnt:SetWndRect( 435, 0, 40, 22 )
  self.item_cnt:SetText( "x" .. cnt )
  self.item_cnt:SetTextAlign( CGameFont.alLeft )
  self.item_cnt:SetFont( GetFontLetterica16Russian() )
  self.item_cnt:SetTextColor( ca, cr, cg, cb )
end


class "ui_rukzak" ( CUIScriptWnd )
function ui_rukzak:__init( owner_id ) super()
  self.owner_id  = owner_id
  self.xml_fname = "ui_dsh_rukzak.xml"
  self:InitControls()
  self:InitCallBacks()
  self:FillOurList()
end
function ui_rukzak:__finalize() end


function ui_rukzak:InitControls()
  self:Init( 50, 50, 500, 600 )
  self:Enable( true )

  local xml = CScriptXmlInit()
  xml:ParseFile( self.xml_fname )

  self.dialog = xml:InitFrame( "main_dialog:dialog", self )

  self.dlg_other = ui_rukzak_other()
  self.dlg_other:InitControls( 10, 50, xml, self )
  self.dialog:AttachChild( self.dlg_other )

  self.dlg_our = ui_rukzak_our()
  self.dlg_our:InitControls( 10, 50, xml, self )
  self.dlg_our:Show( false )
  self.dialog:AttachChild( self.dlg_our )

  self.btn_4 = xml:Init3tButton( "main_dialog:btn_4", self.dialog )
  self:Register( self.btn_4, "btn_4" )
  self.btn_4:Enable( false )
  self:Register(
    xml:Init3tButton( "main_dialog:btn_quit", self.dialog ),
   "btn_quit"
  )

  self.tab = xml:InitTab( "main_dialog:tab", self.dialog )
  self:Register( self.tab, "tab" )
end


function ui_rukzak:InitCallBacks()
  self:AddCallback( "tab", ui_events.TAB_CHANGED, self.OnTabChange, self )
  self:AddCallback( "btn_4", ui_events.BUTTON_CLICKED, self.rep_btn, self )
  self:AddCallback( "btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self )
  self:AddCallback(
    "list_other", ui_events.LIST_ITEM_CLICKED, self.OnListItemClicked, self
  )
  self:AddCallback(
    "list_other", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnListItemDbClicked,
    self
  )
  self:AddCallback(
    "list_our", ui_events.LIST_ITEM_CLICKED, self.OnListItemClicked, self
  )
  self:AddCallback(
    "list_our", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnListItemDbClicked,
    self
  )
end


function ui_rukzak:OnTabChange()
  self.dlg_other:Show( false )
  self.dlg_our:Show( false )
  local i = self.tab:GetActiveIndex()
  if     i == 0 then
    self.dlg_other:Show( true )
  elseif i == 1 then
    self.dlg_our:Show( true )
  end
  self.btn_4:Enable( false )
end


function ui_rukzak:rep_btn()
  local item = self:get_selected_item()
  if not item then return end
end


function ui_rukzak:get_current_list_box()
  local list_box
  local i = self.tab:GetActiveIndex()
  if     i == 0 then
    list_box = self.ui_list_other
  elseif i == 1 then
    list_box = self.ui_list_our
  end
  return list_box
end


function ui_rukzak:get_selected_item()
  local list_box = self:get_current_list_box()
  local item
  if list_box:GetSize() > 0 then
    local itm_index = list_box:GetSelectedItem()
    if itm_index >= 0 then
      item = list_box:GetItem( itm_index )
    end
  end
  return item
end


function ui_rukzak:on_quit()
  self:GetHolder():start_stop_menu( self, true )
  collectgarbage( "collect" )
end


function ui_rukzak:OnListItemClicked()
  local item = self:get_selected_item()
  if not item then return end
  self.btn_4:Enable( true )
end


function ui_rukzak:OnListItemDbClicked()
  self:rep_btn()
end


function ui_rukzak:FillOurList()
  local by_key = {}
  local items  = {}
  for i = 0, db.actor:object_count() - 1 do
    local obj = db.actor:object( i )
    if self:can_include_into_list( obj ) then
      local sect = item_from_inv:section()
      local cond = string.format( "%.1f", obj:condition() * 100 )
      local key = sect .. ":" .. cond
      if by_key[ key ] then
        table.insert( by_key[ key ].game_objs, obj )
      else
        local item = {
          [ "section"   ] = sect,
          [ "game_objs" ] = { obj },
          [ "condition" ] = cond,
        }
        by_key[ key ] = item
        table.insert( items, item )
      end
    end
  end
  for _, item in ipairs( items ) do
    local sect = item.section
    local name = sys_ini:r_string_wq( sect, "inv_name_short" )
    if not name then
      name = sys_ini:r_string_wq( sect, "inv_name" )
    end
    name = game.translate_string( name )
    local ui_item = rukzak_item(
      name, item.condition, table.getn( item.game_objs )
    )
    ui_item.data = item
    self.ui_list_our:AddItem( ui_item )
  end
end


function ui_rukzak:can_include_into_list( item )
  if db.actor:is_in_ruck( item ) then
    local sect = item:section()
    if not get_bool( sect, "quest_item" ) then
      local igw = sys_ini:r_u32( sect, "inv_grid_width",  0 )
      local igh = sys_ini:r_u32( sect, "inv_grid_height", 0 )
      if igw > 0 and igh > 0 then
        return true
      end
    end
  end
  return false
end


class "ui_rukzak_other" ( CUIWindow )
function ui_rukzak_other:__init() super() end
function ui_rukzak_other:__finalize()     end


function ui_rukzak_other:InitControls( x, y, xml, handler )
  self:Init( x, y, 485, 500 )
  self:SetAutoDelete( true )

  self.bk = xml:InitFrame( "list_frame", self )

  handler.ui_list_other = xml:InitList( "tab_other:list", self )
  handler.ui_list_other:ShowSelectedItem( true )
  handler:Register( handler.ui_list_other, "list_other" )
end


class "ui_rukzak_our" ( CUIWindow )
function ui_rukzak_our:__init() super() end
function ui_rukzak_our:__finalize()     end


function ui_rukzak_our:InitControls( x, y, xml, handler )
  self:Init( x, y, 485, 500 )
  self:SetAutoDelete( true )

  self.bk = xml:InitFrame( "list_frame", self )

  handler.ui_list_our = xml:InitList( "tab_our:list", self )
  handler.ui_list_our:ShowSelectedItem( true )
  handler:Register( handler.ui_list_our, "list_our" )
end
