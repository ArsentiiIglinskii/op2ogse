
function init()
end

--------------------------------------ini---------------------------------------
function read_from_ini(ini,sec,lin,def,typ)
	if not ini then
		ini = system_ini()
	end
	if sec and lin and ini:section_exist(sec) and ini:line_exist(sec,lin) then
		if typ == 0 then
			return ini:r_bool(sec,lin)
		elseif typ == 1 then
			return ini:r_string(sec,lin)
		elseif typ == 2 then
			return ini:r_string_wq(sec,lin)
		else
			return ini:r_float(sec,lin)
		end
	else
		return def
	end
end

function read_from_ini_new(iniFileName,sec,lin,def,typ)
	--if sec and lin and ini:section_exist(sec) and ini:line_exist(sec,lin) then
	if sec and lin then
		if typ == 0 then
			--return ini:r_bool(sec,lin)
			return getIniValueBool(sec,lin,def,iniFileName)
		elseif typ == 1 then
			--return ini:r_string(sec,lin)
			return getIniValueString(sec,lin,def,iniFileName)
		elseif typ == 2 then
			--return ini:r_string_wq(sec,lin)
			return getIniValueStringWQ(sec,lin,def,iniFileName)
		else
			--return ini:r_float(sec,lin)
			return getIniValueFloat(sec,lin,def,iniFileName)
		end
	else
		return def
	end
end

function collect_sections(ini,sections)
	local r,p = {},{}
	for k,v in ipairs(sections) do
		if ini:section_exist(v) then
			local n = ini:line_count(v)
			if n > 0 then
				for i = 0,n-1 do
					local res,id,val = ini:r_line(v,i,"","")
					if r[id] == nil then
						r[id] = val
					end
				end
			end
			p[k] = n
		else
			p[k] = 0
		end
	end
	return r,p
end

function collect_sections_new(iniFileName,sections)
	local r,p = {},{}
	for k,v in ipairs(sections) do
		if iniLineSectionExist(v, iniFileName) then
			local n = iniLinesCount(v, iniFileName)
			if n > 0 then
				for i = 0,n-1 do
					local res,id,val = getIniLine(v,i,"","", iniFileName)
					if r[id] == nil then
						r[id] = val
					end
				end
			end
			p[k] = n
		else
			p[k] = 0
		end
	end
	return r,p
end

function parse_list(ini,sec,val,convert)
	local tmp = str_explode(",",read_from_ini(ini,sec,val,"",1),true)
	if convert and #tmp ~= 0 then
		local t = {}
		for i,v in ipairs(tmp) do
			t[v] = true
		end
		return t
	end
	return tmp
end

function parse_list_new(iniFileName,sec,val,convert)
	local tmp = str_explode(",",read_from_ini_new(iniFileName,sec,val,"",1),true)
	if convert and #tmp ~= 0 then
		local t = {}
		for i,v in ipairs(tmp) do
			t[v] = true
		end
		return t
	end
	return tmp
end

--------------------------------------str---------------------------------------
function trim(s)
	return (string.gsub(s,"^%s*(.-)%s*$","%1"))
end

-- удаление из строки начальных и конечных пробелов
function trim_space(s)
	local i,j = 1,-1
	
	while string.sub(s,i,i) == " " do
		i = i+1
	end
	while string.sub(s,j,j) == " " do
		j = j-1
	end

	return string.sub(s,i,j)
end

function str_explode(div,str,clear)
	local t = {}
	local cpt = string.find(str,div,1,true)
	if cpt then
		repeat
			if clear then
				table.insert(t,trim(string.sub(str,1,cpt-1)))
			else
				table.insert(t,string.sub(str,1,cpt-1))
			end
			str = string.sub(str,cpt+string.len(div))
			cpt = string.find(str,div,1,true)
		until cpt == nil
	end
	if clear then
		table.insert(t,trim(str))
	else
		table.insert(t,str)
	end
	return t
end

--------------------------------------class---------------------------------------
function item_is_fa(o,c)
	if not c then
		c = o and o:clsid()
	end
	local t = {
	[clsid.wpn_pm_s] = true,
	[clsid.wpn_walther_s] = true,
	[clsid.wpn_usp45_s] = true,
	[clsid.wpn_hpsa_s] = true,
	[clsid.wpn_bm16_s] = true,
	[clsid.wpn_shotgun_s] = true,
	[clsid.wpn_ak74_s] = true,
	[clsid.wpn_lr300_s] = true,
	[clsid.wpn_groza_s] = true,
	[clsid.wpn_val_s] = true,
	[clsid.wpn_vintorez_s] = true,
	[clsid.wpn_svu_s] = true,
	[clsid.wpn_svd_s] = true,
	[clsid.wpn_rg6_s] = true,
	[clsid.wpn_rpg7_s] = true,
	[clsid.wpn_knife_s] = true}
	if c and t[c] then
		return true
	end
	return false
end

function is_actor(o,c)
	if not c then
		c = o and o:clsid()
	end
	return c == clsid.actor
end

--------------------------------------sch---------------------------------------
function add_anim(npc,anim,move)
	if anim then
		npc:add_animation(anim)
	end
end

function get_sound(snd)
	if snd then
		return xr_sound.get_safe_sound_object(snd)
	end
end

--------------------------------------net------------------------------------------
function get_weapon_data(sobj)
	if not sobj then
		return {}
	end
	local stpk = net_packet()
	sobj:STATE_Write(stpk)
	local size = stpk:w_tell()
	stpk:r_seek(0)
	local t = {}
	parse_object_packet(t,stpk,size)
	parse_visual_packet(t,stpk,size)
	parse_item_packet(t,stpk,size)
	parse_item_weapon_packet(t,stpk,size)
	return t
end

function parse_object_packet(ret,stpk)
	ret.gvid = stpk:r_u16()
	ret.obf32u1 = stpk:r_float()
	ret.obs32u2 = stpk:r_s32()
	ret.lvid = stpk:r_s32()
	ret.oflags = stpk:r_s32()
	ret.custom = stpk:r_stringZ()
	ret.sid = stpk:r_s32()
	ret.obs32u3 = stpk:r_s32()
	return ret
end

function parse_visual_packet(ret,stpk)
	ret.visual = stpk:r_stringZ()
	ret.vsu8u1 = stpk:r_u8()
	return ret
end

function parse_item_packet(ret,stpk)
	ret.condition = stpk:r_float()
	return ret
end

function parse_item_weapon_packet(ret,stpk)
	ret.ammo_current = stpk:r_u16()
	ret.ammo_elapsed = stpk:r_u16()
	ret.weapon_state = stpk:r_u8()
	ret.addon_flags = stpk:r_u8()
	ret.ammo_type = stpk:r_u8()
	return ret
end

function readvu8uN(packet,n)
	local v = {}
	for i=1,n,1 do
		table.insert(v,packet:r_u8())
	end
	return v
end

function set_weapon_data(t,sobj)
	if sobj then
		local stpk = net_packet()
		fill_object_packet(t,stpk)
		fill_visual_packet(t,stpk)
		fill_item_packet(t,stpk)
		fill_item_weapon_packet(t,stpk)	
		local size = stpk:w_tell()
		stpk:r_seek(0)
		sobj:STATE_Read(stpk,size)
	end
end

function fill_object_packet(ret,stpk)
	stpk:w_u16(ret.gvid)
	stpk:w_float(ret.obf32u1)
	stpk:w_s32(ret.obs32u2)
	stpk:w_s32(ret.lvid)
	stpk:w_s32(ret.oflags)
	stpk:w_stringZ(ret.custom)
	stpk:w_s32(ret.sid)
	stpk:w_s32(ret.obs32u3)
end

function fill_visual_packet(ret,stpk)
	stpk:w_stringZ(ret.visual)
	stpk:w_u8(ret.vsu8u1)
end

function fill_item_packet(ret,stpk)
	stpk:w_float(ret.condition)
	return ret
end

function fill_item_weapon_packet(ret,stpk)
	stpk:w_u16(ret.ammo_current)
	stpk:w_u16(ret.ammo_elapsed)
	stpk:w_u8(ret.weapon_state)
	stpk:w_u8(ret.addon_flags)
	stpk:w_u8(ret.ammo_type)
	return ret
end

function writevu8uN(pk,v)
	local len = table.getn(v)
	for i=1,len,1 do
		pk:w_u8(v[i])
	end
end

--------------------------------------addons---------------------------------------
local adt = {}

function get_addon_status(wpn,addon)
	local sec = wpn:section()
	if not adt[sec] then
		adt[sec] = {}
	end
	if not adt[sec][addon] then
		local ast = {sc = "scope_status",sl = "silencer_status",gl = "grenade_launcher_status"}
		adt[sec][addon] = read_from_ini(nil,sec,ast[addon],0)
	end
	return adt[sec][addon]
end

local rep_mem = {}

function get_addon_flag(wpn,with_int)
	local id,tg = wpn:id(),time_global()
	if tg == rep_mem.tg and rep_mem.id == id and rep_mem.wi == with_int then
		return rep_mem.fl
	else
		local flag = get_weapon_data(alife():object(wpn:id())).addon_flags or 0
		if with_int then
			if get_addon_status(wpn,"sc") == 1 then
				flag = flag+1
			end
			if get_addon_status(wpn,"sl") == 1 then
				flag = flag+4
			end
			if get_addon_status(wpn,"gl") == 1 then
				flag = flag+2
			end
		end
		rep_mem = {tg = tg,id = id,wi = with_int,fl = flag}
		return flag
	end
end

function addon_attached(wpn,addon,flag)
	local ft = {sc = {[1] = true,[3] = true,[5] = true,[7] = true},
				sl = {[4] = true,[5] = true,[6] = true,[7] = true},
				gl = {[2] = true,[3] = true,[6] = true,[7] = true}}
	if ft[addon] then
		return ft[addon][flag or get_addon_flag(wpn,true)] == true
	end
	return false
end
