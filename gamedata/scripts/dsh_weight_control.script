-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_drop",         fun = this.remove_outfit   })
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.remove_outfit   })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.use_outfit      })
  sm:subscribe({ signal = "on_update",       fun = this.on_update       })
end


function use_outfit( obj )
  if obj:is_outfit() then
    recalc_outfit()
  end
end


function remove_outfit( obj )
  if obj:is_outfit() and not db.actor:get_current_outfit() then
    recalc_outfit()
  end
end


function on_update()
  ogse_signals.get_mgr():reschedule( 1000 )
  if not db.actor:alive() then return end
  recalc_outfit()
end


function recalc_outfit()
  set_weight_parameters()
  set_radiation_protection()
  set_power_loss()
end


local def_max_weight      = get_float( "inventory", "max_weight", 0 )
local def_max_walk_weight = get_float(
  "actor_condition", "max_walk_weight", 0
)


function set_weight_parameters()
  local ext = {
    [ "actor_max_walk_weight"        ] = 0,
    [ "actor_max_weight"             ] = 0,
    [ "additional_inventory_weight"  ] = 0,
    [ "additional_inventory_weight2" ] = 0,
  }
  ogse_signals.get_mgr():call( "on_before_set_actor_max_weights", ext )
  local outfit = db.actor:get_current_outfit()
  if outfit then
    local cond   = outfit:condition()
    local params = get_outfit_params( outfit:section() )
    db.actor:set_actor_max_weight(
      def_max_weight
        + inventory.on_belt_restore_speed( "additional_inventory_weight2" )
        + ext.actor_max_weight
        + (
            params.additional_inventory_weight2
              + ext.additional_inventory_weight2
          ) * cond
    )
    db.actor:set_actor_max_walk_weight(
      def_max_walk_weight
        + inventory.on_belt_restore_speed( "additional_inventory_weight"  )
        + ext.actor_max_walk_weight
        + (
            params.additional_inventory_weight
              + ext.additional_inventory_weight
          ) * cond
    )
    set_outfit_additional_inventory_weight(  0 )
    set_outfit_additional_inventory_weight2( 0 )
  else
    db.actor:set_actor_max_weight( def_max_weight + ext.actor_max_weight )
    db.actor:set_actor_max_walk_weight(
      def_max_walk_weight + ext.additional_inventory_weight
    )
  end
end


function set_radiation_protection()
  local outfit = db.actor:get_current_outfit()
  if not outfit then return end
  local params = get_outfit_params( outfit:section() )
  local protections = {
    "radiation_protection",
    "telepatic_protection",
  }
  if
    outfit:condition() < 0.8
    or (
      params.helmet
      and not ogse_dynamic_hud.get_current_helmet()
    )
  then
    for _, k in ipairs( protections ) do
      set_outfit_protection( outfit, k, 0 )
    end
  else
    for _, k in ipairs( protections ) do
      set_outfit_protection( outfit, k, params[ k ] )
    end
  end
end


local params_cache = {}
function get_outfit_params( sect )
  if not params_cache[ sect ] then
    local t = {}
    t.additional_inventory_weight  = get_float(
      sect, "additional_inventory_weight",  0
    )
    t.additional_inventory_weight2 = get_float(
      sect, "additional_inventory_weight2", 0
    )
    t.helmet     = get_bool( sect, "dynamic_hud_enable", false )
    t.power_loss = get_float( sect, "power_loss", 1.0 )
    t.radiation_protection = get_float( sect, "radiation_protection", 0 )
    t.telepatic_protection = get_float( sect, "telepatic_protection", 0 )
    params_cache[ sect ] = t
  end
  return params_cache[ sect ]
end


function set_power_loss()
  local outfit = db.actor:get_current_outfit()
  if not outfit then return end
  local cond        = outfit:condition()
  local params      = get_outfit_params( outfit:section() )
  local power_loss  = params.power_loss
  if cond < 0.8 then
    power_loss = power_loss + ( 10 - power_loss ) * ( 0.8 - cond )
  end
  set_outfit_power_loss( outfit, power_loss )
end

